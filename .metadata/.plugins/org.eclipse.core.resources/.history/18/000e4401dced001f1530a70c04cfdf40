@Service
public class InVoiceServiceImpl {

    private final HealthInsurenceRepository signupRepository;
    private final PaymentRepo paymentRepo;
    private final RelationRepository relationRepo;
   
    private Optional<PaymentModel> paymentdetails;
    private Optional<HealthInsurenceModel> signupDetails;
    private List<RelationModel> relationDetails;

    public InVoiceServiceImpl(HealthInsurenceRepository signupRepository, PaymentRepo paymentRepo, RelationRepository relationRepo,
            Optional<PaymentModel> paymentdetails, Optional<HealthInsurenceModel> signupDetails, List<RelationModel> relationDetails) {
        this.signupRepository = signupRepository;
        this.paymentRepo = paymentRepo;
        this.paymentdetails = paymentdetails;
        this.signupDetails = signupDetails;
        this.relationRepo = relationRepo;
    }

    public Optional<PaymentModel> getPaymentetails() {
        return paymentdetails;
    }

    public Optional<HealthInsurenceModel> getSignupDetails() {
        return signupDetails;
    }
    
    public List<RelationModel> getRelationDetails() {
        return relationDetails;
    }

    private void writeTableHeader(PdfPTable table) {
        PdfPCell cell = new PdfPCell();
        cell.setBackgroundColor(new Color(253, 240, 213));
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(5);

        Font font = FontFactory.getFont(FontFactory.HELVETICA);
        font.setColor(new Color(31, 53, 65));

        cell.setPhrase(new Phrase("Insurance Type", font));
        table.addCell(cell);

        cell.setPhrase(new Phrase("Sum Assured ", font));
        table.addCell(cell);

        cell.setPhrase(new Phrase("No.of years", font));
        table.addCell(cell);

        cell.setPhrase(new Phrase("Premium Amount", font));
        table.addCell(cell);

        cell.setPhrase(new Phrase("Start Date", font));
        table.addCell(cell);

        cell.setPhrase(new Phrase("Renewal Date", font));
        table.addCell(cell);
    }

    private void writeTableData(PdfPTable table) {
        PdfPCell cell = new PdfPCell();
        cell.setHorizontalAlignment(Element.ALIGN_CENTER);
        cell.setPadding(10);

        // Ensure Optional is properly handled (use `ifPresent` to check)
        paymentdetails.ifPresent(payment -> {
            cell.setPhrase(new Phrase(payment.getInsuranceType()));
            table.addCell(cell);

            cell.setPhrase(new Phrase(String.valueOf(payment.getSumAssuredAmount())));
            table.addCell(cell);
      
            cell.setPhrase(new Phrase(payment.getYear()));
            table.addCell(cell);
        
            cell.setPhrase(new Phrase(String.valueOf(payment.getPremiumAmount())));
            table.addCell(cell);
        
            cell.setPhrase(new Phrase(payment.getStartDate() + ""));
            table.addCell(cell);

            cell.setPhrase(new Phrase(payment.getEndDate() + ""));
            table.addCell(cell);
        });
    }

    public void export(HttpServletResponse response, String paymentId) throws DocumentException, IOException {
        Document document = new Document(PageSize.A4);
        PdfWriter.getInstance(document, response.getOutputStream());
        document.open();

        // Make sure Optional is properly handled
        this.paymentdetails = paymentRepo.findByPaymentId(paymentId);
        if (!paymentdetails.isPresent()) {
            throw new IllegalArgumentException("Payment details not found for payment ID: " + paymentId);
        }

        this.signupDetails = signupRepository.findByCustomerId(paymentdetails.get().getCustomerId());
        this.relationDetails = relationRepo.findByPaymentId(paymentId);

        try {
            // Load image with fallback
            Image image = null;
            try {
                image = Image.getInstance("D:/PicturesFolder/img.jpeg");
                image.scaleToFit(100f, 100f);
                document.add(image);
            } catch (Exception e) {
                System.out.println("Image not found or error loading: " + e.getMessage());
            }

            // Add header
            Font headerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
            headerFont.setSize(25);
            headerFont.setColor(new Color(120, 0, 0));
            Paragraph pHeader = new Paragraph("RS Insurance Pvt Ltd. \n", headerFont);
            pHeader.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(pHeader);

            // Add bank details and customer details (Ensure `signupDetails` is available)
            Font fontP = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
            fontP.setSize(18);
            fontP.setColor(new Color(120, 0, 0));
            Chunk glue = new Chunk(new VerticalPositionMark());
            Paragraph pp = new Paragraph("\nCompany Details", fontP);
            pp.add(new Chunk(glue));
            pp.add("Customer Details");
            document.add(pp);

            Font fontN = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
            fontN.setSize(12);
            fontN.setColor(Color.BLACK);
            Paragraph pN = new Paragraph("Company Name: RS Insurance pvt ltd.");
            pN.add(new Chunk(glue));
            pN.add("CustomerID: " + paymentdetails.get().getCustomerId());
            document.add(pN);

            // Add more details...

            // Add Invoice
            Font font = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
            font.setSize(22);
            font.setColor(new Color(120, 0, 0));
            Paragraph p1 = new Paragraph("\n Invoice\n  ", font);
            p1.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(p1);

            // Add relation details table
            if (!relationDetails.isEmpty()) {
                Font fontP1 = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
                fontP1.setSize(18);
                fontP1.setColor(new Color(120, 0, 0));
                Chunk glue1 = new Chunk(new VerticalPositionMark());
                Paragraph pp1 = new Paragraph("\nInsured Members :", fontP1);
                pp1.add(new Chunk(glue1));
                document.add(pp1);

                // Create table for relations
                PdfPTable relationTable = new PdfPTable(3);
                relationTable.setWidthPercentage(100f);
                relationTable.setSpacingBefore(10);
                writeTableHeader(relationTable);
                writeTableData(relationTable);
                document.add(relationTable);
            }

            // Footer
            Font footerFont = FontFactory.getFont(FontFactory.HELVETICA_BOLD);
            footerFont.setSize(12);
            footerFont.setColor(new Color(120, 0, 0));
            Paragraph fHeader = new Paragraph("\n Thank you for choosing Rs Insurance. If any queries, feel free to Contact us at support@ramanasoft.com or 1800-258-2465. \n");
            fHeader.setAlignment(Paragraph.ALIGN_CENTER);
            document.add(fHeader);

        } catch (Exception e) {
            System.out.println("Error while generating PDF: " + e.getMessage());
            e.printStackTrace();
        } finally {
            if (document != null) {
                document.close();
            }
        }
    }
}
