package com.healthinsurence.serviceimplemention;


import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.healthinsurence.dto.PRPDto;
import com.healthinsurence.model.HealthInsurenceModel;
import com.healthinsurence.model.PRPModel;
import com.healthinsurence.repo.HealthInsurenceRepository;
import com.healthinsurence.repo.PRPRepo;
import com.healthinsurence.service.PRPService;



@Service
public class PRPServiceImp implements PRPService {

@Autowired
private PRPRepo repository; // PRP repository

@Autowired
private HealthInsurenceRepository repo; // Health insurance repository

@Override
public ResponseEntity savePRP(PRPDto prpDto) {
try {
// Check if the customer exists in HealthInsuranceModel
Optional< HealthInsurenceModel> customerData = repo.findByCustomerId(prpDto.getCustomerId());

if (!customerData.isPresent()) {
// If the customer is not found, return a 404 NOT_FOUND response
return ResponseEntity.status(HttpStatus.NOT_FOUND)
.body("Customer not found for the given ID: " + prpDto.getCustomerId());
}

// Check if an entry for the same customerId already exists in PRPModel (duplicate check)
Optional< PRPModel> existingEntry = repository.findByCustomerId(prpDto.getCustomerId());

if (existingEntry.isPresent()) {
// If the entry already exists, return a 409 CONFLICT response
return ResponseEntity.status(HttpStatus.CONFLICT)
.body("Duplicate entry is not allowed for customer ID: " + prpDto.getCustomerId());
}

// Create and populate the PRPModel
PRPModel prpModel = new PRPModel();
prpModel.setCustomerId(prpDto.getCustomerId());
prpModel.setHouseNo(prpDto.getHouseNo());
prpModel.setStreet(prpDto.getStreet());
prpModel.setCity(prpDto.getCity());
prpModel.setState(prpDto.getState());
prpModel.setPincode(prpDto.getPincode());

// Save the new PRPModel to the repository
repository.save(prpModel);

// Return a success response if the entry is saved
return ResponseEntity.status(HttpStatus.CREATED)
.body("Relation saved successfully for customer ID: " + prpDto.getCustomerId());
} catch (Exception e) {
// Catch any unexpected errors and return a 500 INTERNAL_SERVER_ERROR response
e.printStackTrace();
return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
.body("An error occurred while saving the relation.");
}
}
}
